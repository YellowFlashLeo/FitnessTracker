@page "/foodType/{foodTypeUrl}"
@inject INutritionService NutritionService
@inject TrainingDayState TrainingDayState
@inject NavigationManager NavigationManager

<div class="main">
    <ul class="pizza-cards">
        @if (foods != null)
        {
            @foreach (var food in foods)
            {
                <li @onclick="@(()=> TrainingDayState.ShowConfigureMealDialog(food))" style="background-image: url('@food.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@food.Title</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (TrainingDayState.TrainingDay.Meals.Any() || TrainingDayState.TrainingDay.Trainings.Any())
    {
        <div class="order-contents">
            <h2>Your days statistics</h2>

            @foreach (var configuredTrainingExercise in TrainingDayState.TrainingDay.Trainings)
            {
                <ConfiguredExerciseItem TrainingExercise="configuredTrainingExercise" OnRemoved="@(() => TrainingDayState.RemoveConfiguringTrainingSession(configuredTrainingExercise))" />
            }

            @foreach (var configuredMeal in TrainingDayState.TrainingDay.Meals)
            {
                <ConfiguredFoodDialog Meal="configuredMeal" OnRemoved="@(() => TrainingDayState.RemoveConfiguringMeal(configuredMeal))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Get your ass to the gym!<br>to get started</div>
    }

    <div class="order-total @(TrainingDayState.TrainingDay.Trainings.Any() || TrainingDayState.TrainingDay.Meals.Any() ? "" : "hidden")">
        Total Calories:
        <span class="total-price">@TrainingDayState.TrainingDay.GetMealsTotalCalories()</span>
        <a href="overallDay" class="@(TrainingDayState.TrainingDay.Trainings.Count == 0 && TrainingDayState.TrainingDay.Meals.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Save Day >
        </a>
    </div>
</div>


@if (TrainingDayState.ShowingMealDialog)
{
    <ConfigureFoodDialog Meal="TrainingDayState.ConfiguringMeal"
                             OnCancel="TrainingDayState.CancelConfigureMeal"
                             OnConfirm="TrainingDayState.ConfirmConfigureMealDialog" />
}

@code {
    [Parameter] public string FoodTypeUrl { get; set; }
    List<Food> foods;

    protected override async Task OnParametersSetAsync()
    {
        foods = await NutritionService.GetFoods(FoodTypeUrl);
    }
}
